{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(git clone:*)",
      "Bash(pkg install:*)",
      "Bash(gh auth:*)",
      "Bash(tsx:*)",
      "Bash(npm install:*)",
      "Bash(ollama:*)",
      "Bash(gh:*)",
      "Bash(npm run status:*)",
      "Bash(npm run health:*)",
      "Bash(npx tsx:*)",
      "Bash(git fetch:*)",
      "Bash(git stash:*)",
      "Bash(git pull:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(if grep -Rin --exclude-dir=.git -E \"Aurora|aurora\" .)",
      "Bash(then echo \"^^^ WARNING: Aurora term(s) found above — fix before pushing.\")",
      "Bash(else echo \"OK: no Aurora refs found.\")",
      "Bash(fi)",
      "Bash(git commit:*)",
      "Bash(if grep -Rin --exclude-dir=.git -E \"Seven|seven\" .)",
      "Bash(then echo \"^^^ WARNING: Seven term(s) found above — fix before pushing.\")",
      "Bash(else echo \"OK: no Seven refs found.\")",
      "Bash(git add:*)",
      "Bash(SEVEN=\"/data/data/com.termux/files/home/seven-of-nine-core\")",
      "Bash(AURORA=\"/data/data/com.termux/files/home/aurora-core\")",
      "Bash(audit_repo \"$SEVEN\")",
      "Bash(npm audit:*)",
      "Bash(git rev-parse:*)",
      "Bash(git checkout:*)",
      "Bash(cp:*)",
      "Bash(git apply:*)",
      "Bash(grep:*)",
      "Bash(chmod:*)",
      "Bash(true)",
      "Bash(git push:*)",
      "Bash(npm run build:*)",
      "Bash(npm test)",
      "Bash(bash:*)",
      "Bash(tsc --noEmit)",
      "Bash(npx tsc:*)",
      "Bash(npx depcheck:*)",
      "Bash(npx @cyclonedx/cyclonedx-npm:*)",
      "Bash(.github/workflows/simple-apk-build.yml)",
      "Bash(git remote set-url:*)",
      "Bash(timeout 10 npx tsx boot-seven.ts)",
      "Bash(git rebase:*)",
      "Bash(SEVEN_PRIVATE=1 npm test)",
      "Bash(SEVEN_PRIVATE=1 npx tsc --noEmit core/companion/firewall/RestraintDoctrine.ts core/companion/logs/PrivateRestraintLog.ts)",
      "Bash(SEVEN_PRIVATE=1 npx tsc --noEmit core/companion/firewall/RestraintDoctrine.ts)",
      "Bash(SEVEN_PRIVATE=1 npx tsx restraint-doctrine-simulation.ts)",
      "Bash(SEVEN_PRIVATE=1 npx tsx crypto-log-verification.ts)",
      "Bash(SEVEN_PRIVATE=1 npx tsx memory-echoes-verification.ts)",
      "Bash(SEVEN_PRIVATE=1 npx tsx negative-tests-verification.ts)",
      "Bash(timeout 10s npx tsx boot-seven.ts)",
      "Bash(timeout 30s npx tsx boot-seven.ts)",
      "Bash(node:*)",
      "Bash(node:*)",
      "Bash(~/.claude/usage-statusline.sh:*)",
      "Bash(sed:*)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then sed -i 's/quadranlock/quadran-lock/g; s/Quadranlock/Quadran-Lock/g; s/QUADRANLOCK/QUADRAN-LOCK/g' \"$file\")",
      "Bash(done)",
      "Bash(then sed -i 's/quadranlock/quadran-lock/g; s/Quadranlock/Quadran-Lock/g; s/QUADRANLOCK/QUADRAN-LOCK/g; s/runQuadranLock/runQuadranLock/g; s/quadranLockEnabled/quadranLockEnabled/g' \"$file\")",
      "Bash(cat:*)",
      "Bash(command -v:*)",
      "Bash(npm run platform:windows:*)",
      "Bash(npm run platform:mobile:*)",
      "Bash(npm run platform:companion:*)",
      "Bash(npm run platform:termux:*)",
      "Bash(npm run:*)",
      "Bash(timeout 60s npx tsx scripts/xplat-validate.ts)",
      "Bash(./missing-pieces-bootstrap.sh:*)",
      "Bash(./p0p1-hotfix-pack.sh:*)",
      "Bash(./stabilization-patch-v2.sh:*)",
      "Bash(export NODE_ENV=development)",
      "Bash(export QUADRAN_DEV=1)",
      "Bash(./setup-prod-bundle.sh:*)",
      "Bash(./hardened-dropins.sh:*)",
      "Bash(NODE_ENV=production npm run quadran-lock:hard)",
      "Bash(./wave2-esm-universal.sh:*)",
      "Bash(NODE_ENV=production ./run creator-bond)",
      "Bash(NODE_ENV=production ./run quadran-lock)",
      "Bash(NODE_ENV=production tsx scripts/runners/creator-bond.runner.ts)",
      "Bash(NODE_ENV=production tsx scripts/runners/quadran-lock.runner.ts)",
      "Bash(./run repo-audit)",
      "Bash(./run ghost)",
      "Bash(./run quadra-cssr)",
      "Bash(./run restraint)",
      "Bash(./run integration-test)",
      "Bash(./run quadran-lock)",
      "Bash(./run creator-bond)",
      "Bash(./run threat-sim)",
      "Bash(./run dependency-risk)",
      "Bash(./run data-sanitize)",
      "Bash(./scripts/agents/agent-runner.sh:*)",
      "Bash(./run:*)",
      "Bash(source:*)",
      "Bash(./install-claude-gemini.sh:*)",
      "Bash(cc_use_gemini)",
      "Bash(cc_bridge)",
      "Bash(ssh-keygen:*)",
      "Bash(git config:*)",
      "Bash(git log:*)",
      "Bash(npx husky init:*)",
      "Bash(git reset:*)"
    ],
    "deny": []
  }
}